plugins {
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/algs4/maven" }
    maven { url "https://dl.bintray.com/steppschuh/Markdown-Generator" }
    maven { url "https://jitpack.io" }
}

sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

applicationDefaultJvmArgs = ["-Djava.library.path=lib"]

dependencies {

    implementation 'com.github.PhilipeLouchtch:GraphMatch-Java:c063147'
    implementation 'com.github.PhilipeLouchtch:plouchtch-lib-java:14987f7'

    implementation files('lib/Jdrasil.jar')

    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

    /* GOOGLE-OR TOOLS */
    implementation 'com.google.ortools:ortools-java:9.4.1874'

    /* GUROBI LIB*/
    implementation gurobi()

    /* Generated reports */
    implementation 'net.steppschuh.markdowngenerator:markdowngenerator:1.3.1.1'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.0'
    implementation 'org.apache.velocity:velocity-engine-core:2.3'
    implementation 'org.jfree:jfreechart:1.5.0'

    implementation 'org.sql2o:sql2o:1.6.0'
    implementation 'mysql:mysql-connector-java:8.0.16'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

wrapper {
    gradleVersion = '7.5.1'
}

compileJava {
    options.compilerArgs << '--enable-preview'
}

compileTestJava {
    options.compilerArgs << '--enable-preview'
}

static def gurobiLibsDir() {
    String gurobiHome = System.getenv("GUROBI_HOME")
    gurobiHome + File.separator + "lib" + File.separator
}

/* CHECKS GUROBI LIB EXISTS */
def gurobi() {
    String gurobiJar = gurobiLibsDir() + "gurobi.jar";
    if (!file(gurobiJar).exists())
        throw new RuntimeException("Install Gurobi and ensure env variable GUROBI_HOME points to its root dir\n (file doesn't exist: [" + gurobiJar +']')

    String gurobiJavadoc = gurobiLibsDir() + "gurobi-javadoc.jar"
    if (!file(gurobiJavadoc).exists())
        throw new RuntimeException("Install Gurobi and ensure env variable GUROBI_HOME points to its root dir\n (file doesn't exist: [" + gurobiJavadoc +']')

    return files(gurobiJar, gurobiJavadoc)
}